import * as React from 'react';
import * as ReactDOM from 'react-dom';

require('./image_controls.css');

interface ImageControlsProps {
    blendMode?: number
}

interface ImageControlsState {
    blendMode: number
}

export class ImageControlsParent extends React.Component<ImageControlsProps, ImageControlsState> {
    static defaultProps: ImageControlsProps = {
        blendMode: 1
    };

    constructor(props: ImageControlsProps) {
        super(props);

        this.handleBlendModeChange = this.handleBlendModeChange.bind(this);

        this.setState({ blendMode: this.props.blendMode! });
    }

    handleBlendModeChange(e: Event) {
        let value = parseInt(e.target.value);

        this.setState({ blendMode: value });
    }

    render() {
        return (
            <div>
                <ImageControlsController
                visualizer={this.props.visualizer}
                viewerState={this.props.viewerState}
                />
                <br />
                <div id="blendmode">
                Blending:
                <select name="blendmode"
                    onChange={this.handleBlendModeChange}
                    value={this.state.blendMode}
                    >
                    <option value="1">Normal</option>
                    <option value="2">Additive</option>
                    <option value="3">Subtractive</option>
                    <option value="4">Multiply</option>
                    <option value="0">None</option>
                </select>
                <span style={{float: "right"}}>
                    <a href="#" data-toggle="modal" data-target="#blendModeHelp">
                    <i className="fa fa-info-circle fa-lg"></i>
                    </a>
                </span>
                </div>
            </div>
        );
    }
}

interface ImageControlsControllerState {
    collapsed: boolean
}

class ImageControlsController extends React.Component<undefined, ImageControlsControllerState> {
    constructor(props: undefined) {
        super(props);

        this.setCollapsedTrue = this.setCollapsedTrue.bind(this);
        this.setCollapsedFalse = this.setCollapsedFalse.bind(this); 

        this.setState({
            collapsed: false
        });
    }

    setCollapsedTrue() {
        this.setState({collapsed: true});
    }

    setCollapsedFalse() {
        this.setState({collapsed: false});
    }

    render() {
        return (
            <div id="image-sliders">
                <small><a href="#" onClick={this.setCollapsedTrue}>Collapse All</a> / <a href="#" onClick={this.setCollapsedFalse}>Expand All</a></small>
                {layers.map(function(layer, i) {
                var layerKey = 'controls-' + i;
                if (layer.enabled) {
                    return (
                    <div key={layerKey}>
                        <ImageControlsLayer
                        layer={layer}
                        visualizer={this.props.visualizer}
                        collapsed={this.state.collapsed}
                        />
                    </div>
                    );
                } else {
                    return null;
                }
                }.bind(this))}
            </div>
        )
    }
}
